import { supabase } from '../lib/supabase'
import type { Pinche } from '../types'

// Map client tipo names to database pinche_tipo codes
const tipoToPincheTipo: Record<string, string> = {
    'apertura': 'pinche_apertura',
    'programado': 'pinche_programado',
    'sanitario': 'pinche_sanitario'
}

export async function syncPincheToSupabase(pinche: Pinche) {
    console.log('=== Syncing pinche ===')
    console.log('pinche:', pinche)

    // STEP 1: Map tipo to pinche_tipo code
    const pincheTipo = tipoToPincheTipo[pinche.tipo.replace('pinche_', '')] || pinche.tipo

    if (!pincheTipo || pincheTipo.trim() === '') {
        throw new Error(`Tipo de pinche inválido: "${pinche.tipo}"`)
    }

    // STEP 2: Get id_cama with validation (validates finca → bloque → grupo_cama → cama)
    // Note: pinche.finca should be a finca ID, not a name
    const { data: camaData, error: camaError } = await supabase
        .from('cama')
        .select('id_cama, grupo_cama!inner(id_bloque, bloque!inner(id_finca))')
        .eq('nombre', pinche.cama)
        .eq('grupo_cama.bloque.id_finca', parseInt(pinche.finca))
        .eq('grupo_cama.bloque.nombre', pinche.bloque)
        .limit(1)
        .single()

    if (camaError || !camaData) {
        throw new Error(`Cama "${pinche.cama}" no encontrada en finca ${pinche.finca}, bloque ${pinche.bloque}`)
    }

    // Extract id_bloque from the validated query result
    // The grupo_cama relation returns an array, so we need to access the first element
    const bloqueId = Array.isArray(camaData.grupo_cama)
        ? camaData.grupo_cama[0]?.id_bloque
        : (camaData.grupo_cama as any).id_bloque

    // STEP 3: Get id_variedad (optional)
    let variedadId: number | null = null
    if (pinche.variedad) {
        const { data: variedadData, error: variedadError } = await supabase
            .from('variedad')
            .select('id_variedad')
            .eq('nombre', pinche.variedad)
            .limit(1)
            .single()

        if (!variedadError && variedadData) {
            variedadId = variedadData.id_variedad
        }
    }

    // STEP 4: Insert pinche
    // Note: created_at is auto-generated by database (now())
    // Note: No id_punto_gps or id_usuario fields in pinche table
    const { data, error } = await supabase
        .from('pinche')
        .insert({
            bloque: bloqueId,
            cama: camaData.id_cama,
            variedad: variedadId,
            tipo: pincheTipo,
            cantidad: pinche.cantidad,
        })
        .select('id')
        .single()

    if (error) {
        console.error('Pinche insert error:', error)
        throw error
    }

    console.log('Pinche synced successfully:', data)
    return data
}

export async function getPinchesForDay(date: Date | string) {
    const targetDate = typeof date === 'string' ? new Date(date) : date
    const startOfDay = new Date(targetDate)
    startOfDay.setHours(0, 0, 0, 0)
    const endOfDay = new Date(targetDate)
    endOfDay.setHours(23, 59, 59, 999)

    const { data, error } = await supabase
        .from('pinche')
        .select(`
      id,
      created_at,
      bloque:bloque!pinche_bloque_fkey(id_bloque, nombre, id_finca),
      cama:cama!pinche_cama_fkey(id_cama, nombre),
      variedad:variedad!pinche_variedad_fkey(id_variedad, nombre),
      tipo,
      cantidad
    `)
        .gte('created_at', startOfDay.toISOString())
        .lte('created_at', endOfDay.toISOString())
        .order('created_at', { ascending: true })

    if (error) {
        console.error('Error fetching pinches:', error)
        throw error
    }

    return data || []
}
