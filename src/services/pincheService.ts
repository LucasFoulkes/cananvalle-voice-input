import { supabase } from '../lib/supabase'
import { findVariedad, findVariedadByNombre } from '@/lib/variedades'
import type { Pinche, PincheTipo } from '../types'

const VALID_PINCHE_TIPOS: PincheTipo[] = ['pinche apertura', 'pinche programado', 'pinche sanitario']

const normalizePincheTipo = (value: string): PincheTipo | null => {
    const normalized = value.replace(/_/g, ' ').trim().toLowerCase()
    const candidate = normalized.startsWith('pinche ') ? normalized : `pinche ${normalized}`
    return VALID_PINCHE_TIPOS.find(tipo => tipo === candidate) ?? null
}

export async function syncPincheToSupabase(pinche: Pinche) {
    console.log('=== Syncing pinche ===')
    console.log('pinche:', pinche)

    // STEP 1: Normalize tipo to match pinche_tipo lookup table (underscores → spaces)
    const pincheTipo = normalizePincheTipo(pinche.tipo)

    if (!pincheTipo) {
        throw new Error(`Tipo de pinche inválido: "${pinche.tipo}"`)
    }

    // STEP 2: Resolve bloqueId / variedadId from local lookup
    const resolvedVariedad =
        (pinche.variedadId != null ? findVariedad(pinche.finca, pinche.bloque, pinche.variedadId) : null)
        ?? findVariedadByNombre(pinche.finca, pinche.bloque, pinche.variedad)

    const bloqueId = resolvedVariedad?.bloqueId
    const variedadId = resolvedVariedad?.id ?? pinche.variedadId ?? null

    if (!bloqueId) {
        throw new Error(`No se encontró el bloque para la variedad seleccionada (${pinche.variedad}) en finca ${pinche.finca}, bloque ${pinche.bloque}`)
    }

    if (!variedadId) {
        throw new Error(`No se encontró la variedad seleccionada (${pinche.variedad}) en finca ${pinche.finca}, bloque ${pinche.bloque}`)
    }

    // STEP 3: Insert pinche
    // Note: created_at is auto-generated by database (now())
    // Note: No id_punto_gps or id_usuario fields in pinche table
    const { data, error } = await supabase
        .from('pinche')
        .insert({
            bloque: bloqueId,
            cama: null,
            variedad: variedadId,
            tipo: pincheTipo,
            cantidad: pinche.cantidad,
        })
        .select('id')
        .single()

    if (error) {
        console.error('Pinche insert error:', error)
        throw error
    }

    console.log('Pinche synced successfully:', data)
    return data
}

export async function getPinchesForDay(date: Date | string) {
    const targetDate = typeof date === 'string' ? new Date(date) : date
    const startOfDay = new Date(targetDate)
    startOfDay.setHours(0, 0, 0, 0)
    const endOfDay = new Date(targetDate)
    endOfDay.setHours(23, 59, 59, 999)

    const { data, error } = await supabase
        .from('pinche')
        .select(`
      id,
      created_at,
      bloque:bloque!pinche_bloque_fkey(id_bloque, nombre, id_finca),
      cama:cama!pinche_cama_fkey(id_cama, nombre),
      variedad:variedad!pinche_variedad_fkey(id_variedad, nombre),
      tipo,
      cantidad
    `)
        .gte('created_at', startOfDay.toISOString())
        .lte('created_at', endOfDay.toISOString())
        .order('created_at', { ascending: true })

    if (error) {
        console.error('Error fetching pinches:', error)
        throw error
    }

    return data || []
}
